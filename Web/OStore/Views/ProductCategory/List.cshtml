@using System.Text
@using OStore.Models
@model OStore.Models.ProductCategoryViewModel
@{
    ViewBag.Title = GlobalResources.StringResource.Shop_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/KendoUi/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/KendoUi/kendo.uniform.min.css" rel="stylesheet" />
<script src="~/Scripts/Kendo/kendo.all.min.js"></script>
<script src="~/Scripts/KnockoutKendo.js"></script>
@using (Html.BeginForm("List", "ProductCategory", FormMethod.Post))
{
<div>

    Categories:
    <div class="input-group col-md-4">
        @Html.TextBoxFor(c => c.Name, new { @class = "TrackingSearch form-control", style = " width: 100%;", placeholder = "Add New Category" })
        @*<span class="input-group-btn">
            <button class="btn btn-default TrackingSearch" type="submit"><i class="glyphicon glyphicon-search"></i></button>
        </span>*@
    </div>
   
   
   
</div>

<div class="panel panel-default col-md-6" style="margin-top: 12px;">
    <div class="panel-body">

        <ul data-bind="kendoTreeView: {  }">
            @if (Model != null && Model.TreeViewExamples != null)
            {
                StringBuilder b = new StringBuilder();
                //b = generate(Model.TreeViewExamples, b);
                //    @Html.Raw(generate(Model.TreeViewExamples, b).ToString())
                @Html.Raw(GenerateNavigationTabs(Model.TreeViewExamples, 0, false))
            }
        </ul>
        <br/>
      
            @Html.FileUploadForm("../../Shop/SaveLogo")
        <div class="form-group pull-right" style="margin-top: 50px;">
            <button class="btn btn-success" type="submit" name="command" value="Save" style="margin-right: 5px;">@GlobalResources.StringResource.Shop_Edit_btnSave</button>
            <button class="btn btn-bitbucket" type="submit" name="command" value="Cancel" style="margin-right: 5px;">@GlobalResources.StringResource.Shop_Edit_btnCancel</button>
        </div>
        
        </div>
    </div>

<script type="text/javascript">
    var ViewModel = function () { };

    ko.applyBindings(new ViewModel());
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        Dropzone.options.dropzoneForm = {
            maxFiles: 2,
            init: function () {
                var myDropzone = this;
                this.on("complete", function (data) {
                    var res = JSON.parse(data.xhr.responseText);
                    console.log(res.Message);
                });
            }
        };
    </script>

}
@functions
{

    private StringBuilder generate(List<TreeViewExampleModel> TreeViewExamples, StringBuilder builder)
    {
        TreeViewExamples.ForEach(category =>
        {



            if (category.SubCategories != null)
            {
                StringBuilder subbuilder = new StringBuilder();
                builder.Append(string.Format("<li>{0}{1}{2}{3}<ul>{4}</ul></li>", category.Display, Html.CheckBoxFor(m => category.Checked, new { @class = "checkbox-inline" }), Html.HiddenFor(m => category.Id), Html.HiddenFor(m => category.Display), generate(category.SubCategories, subbuilder).ToString()));

                //generate(category.SubCategories, builder);
            }
            else
            {
                builder.Append(string.Format("<li>{0}{1}</li>{2}{3}", category.Display, Html.CheckBoxFor(m => category.Checked, new { @class = "checkbox-inline" }), Html.HiddenFor(m => category.Id), Html.HiddenFor(m => category.Display)));
            }

        });
        return builder;
    }
    private string GenerateNavigationTabs(List<TreeViewExampleModel> TreeViewExamples,int mainBranchIndex, bool haveSubs)
    {
        try
        {
            StringBuilder builder = new StringBuilder();

            for (int i = 0; i < TreeViewExamples.Count; i++)
            {

                if (TreeViewExamples[i].SubCategories != null)
                {
                    builder.Append(string.Format("<li>{0}{1}{2}{3}<ul>{4}</ul></li>", TreeViewExamples[i].Display, Html.CheckBoxFor(m => m.TreeViewExamples[i].Checked, new { @class = "checkbox-inline" }), Html.HiddenFor(m => m.TreeViewExamples[i].Id), Html.HiddenFor(m => m.TreeViewExamples[i].Display), GenerateNavigationTabs(TreeViewExamples[i].SubCategories,i,true)));
                }
                else
                {
                    if(haveSubs)
                    {
                        builder.Append(string.Format("<li>{0}{1}</li>{2}{3}", TreeViewExamples[i].Display, Html.CheckBoxFor(m => m.TreeViewExamples[mainBranchIndex].SubCategories[i].Checked, new { @class = "checkbox-inline" }),Html.HiddenFor(m => m.TreeViewExamples[mainBranchIndex].SubCategories[i].Id), Html.HiddenFor(m => m.TreeViewExamples[mainBranchIndex].SubCategories[i].Display)));
                    }
                    else
                        builder.Append(string.Format("<li>{0}{1}</li>{2}{3}", TreeViewExamples[i].Display, Html.CheckBoxFor(m => m.TreeViewExamples[i].Checked, new { @class = "checkbox-inline" }), Html.HiddenFor(m => m.TreeViewExamples[i].Id), Html.HiddenFor(m => m.TreeViewExamples[i].Display)));



                }
            }

            //model.ForEach(m =>
            //{
            //    if (m.SubCategories!=null)
            //    {
            //        builder.Append(string.Format("<li>{0}{1}<ul>{2}</ul></li>", m.Display, @Html.CheckBox(m.Display, m.Checked, new { @class = "checkbox-inline" }), GenerateNavigationTabs(m.SubCategories)));
            //    }
            //    else
            //    {

            //        builder.Append(string.Format("<li>{0}{1}</li>", m.Display, @Html.CheckBox(m.Display, m.Checked, new {@class = "checkbox-inline"})));
            //    }
            //});
            return builder.ToString();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

}
}